{
	"info": {
		"_postman_id": "277b800a-fc0a-4c7e-bd1f-c7823980b8ff",
		"name": "Books Store",
		"description": "Book store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38621417"
	},
	"item": [
		{
			"name": "Book list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"// Test to check if the response is an array of objects\r",
							"pm.test(\"Response is an array of objects\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
							"    pm.response.json().forEach(function(book) {\r",
							"        pm.expect(book).to.be.an('object').that.has.all.keys('_id', 'title', 'price', 'pages', 'publisher');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the Content-Type header set to application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(book) {\r",
							"        pm.expect(book).to.be.an('object');\r",
							"        pm.expect(book).to.include.all.keys('_id', 'title', 'price', 'pages', 'publisher');\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseApi}}/books",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"books"
					]
				},
				"description": "The endpoint makes an HTTP GET request to retrieve a list of books from the server. The response returned is a JSON array with each object containing the following properties:\n\n- \"_id\" (string): The unique identifier of the book.\n    \n- \"title\" (string): The title of the book.\n    \n- \"price\" (number): The price of the book.\n    \n- \"pages\" (number): The number of pages in the book.\n    \n- \"publisher\" (string): The publisher of the book.\n    \n\nHere is the JSON schema for the response:\n\n``` json\n{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"_id\": { \"type\": \"string\" },\n      \"title\": { \"type\": \"string\" },\n      \"price\": { \"type\": \"number\" },\n      \"pages\": { \"type\": \"number\" },\n      \"publisher\": { \"type\": \"string\" }\n    }\n  }\n}\n\n ```"
			},
			"response": [
				{
					"name": "Book List",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseApi}}/books",
							"host": [
								"{{baseApi}}"
							],
							"path": [
								"books"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "97"
						},
						{
							"key": "ETag",
							"value": "W/\"61-GfLT2VSDtTEsRF+DUCbp1StGAJg\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Oct 2024 22:50:41 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"_id\": \"66d9bc24850c85afa9585162\",\n        \"title\": \"Matrix\",\n        \"price\": 10,\n        \"pages\": 100,\n        \"publisher\": \"Warner\"\n    }\n]"
				}
			]
		},
		{
			"name": "Book get by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, title, author, genre, publishedDate, and rating\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('string');\r",
							"    pm.expect(responseData.title).to.be.a('string');\r",
							"    pm.expect(responseData.author).to.be.a('string');\r",
							"    pm.expect(responseData.genre).to.be.a('string');\r",
							"    pm.expect(responseData.publishedDate).to.match(/\\d{4}-\\d{2}-\\d{2}/);\r",
							"    pm.expect(responseData.rating).to.be.a('number');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Published date is in a valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('publishedDate').that.is.a('string').and.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price and pages are non-negative integers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.price).to.be.a('number').and.to.be.at.least(0, \"Price should be a non-negative integer\");\r",
							"    pm.expect(responseData.pages).to.be.a('number').and.to.be.at.least(0, \"Pages should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseApi}}/books/66d9bc24850c85afa9585162",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"books",
						"66d9bc24850c85afa9585162"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve details of a specific book identified by its unique ID. The request does not include a request body. The response will contain information about the book such as its title, author, genre, published date, and rating. The response body will be in JSON format with the following structure:\n\n``` json\n{\n  \"_id\": \"\",\n  \"title\": \"\",\n  \"price\": 0,\n  \"pages\": 0,\n  \"publisher\": \"\"\n}\n\n ```\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"title\": {\n      \"type\": \"string\"\n    },\n    \"author\": {\n      \"type\": \"string\"\n    },\n    \"genre\": {\n      \"type\": \"string\"\n    },\n    \"publishedDate\": {\n      \"type\": \"string\",\n      \"format\": \"date\"\n    },\n    \"rating\": {\n      \"type\": \"number\"\n    }\n  }\n}\n\n ```"
			},
			"response": [
				{
					"name": "Book get by id",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseApi}}/books/66d9bc24850c85afa9585162",
							"host": [
								"{{baseApi}}"
							],
							"path": [
								"books",
								"66d9bc24850c85afa9585162"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "95"
						},
						{
							"key": "ETag",
							"value": "W/\"5f-6XbOJ3LrDgP51deDK3aSXLAW9Tk\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Oct 2024 22:51:29 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"_id\": \"66d9bc24850c85afa9585162\",\n    \"title\": \"Matrix\",\n    \"price\": 10,\n    \"pages\": 100,\n    \"publisher\": \"Warner\"\n}"
				}
			]
		},
		{
			"name": "Book store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": {{$randomJobTitle}},\r\n    \"publishser\": {{$randomProduct}},\r\n    \"price\": {{$randomPrice}},\r\n    \"pages\": 27,\r\n    \"author\": \"66fdd2eb79177bed4e1ed1f7\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseApi}}/books",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"books"
					]
				},
				"description": "The endpoint allows the user to create a new book by sending a POST request to {{baseApi}}/books. The request should include a JSON payload with the following parameters:\n\n- title (string): The title of the book.\n    \n- publisher (string): The publisher of the book.\n    \n- price (number): The price of the book.\n    \n- pages (number): The number of pages in the book.\n    \n- author (string): The author of the book.\n    \n\nThe response of this request can be documented as a JSON schema.\n\nThis endpoint allows you to add a new book to the collection.\n\n#### Request Body\n\n- `title` (string, required): The title of the book.\n    \n- `publisher` (string, required): The publisher of the book.\n    \n- `price` (number, required): The price of the book.\n    \n- `pages` (number, required): The total number of pages in the book.\n    \n- `author` (string, required): The author of the book.\n    \n\n#### Response\n\nUpon successful addition of the book, the response will include the details of the newly added book."
			},
			"response": []
		},
		{
			"name": "Book update",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": {{$randomJobTitle}},\r\n    \"publishser\": {{$randomProduct}},\r\n    \"price\": {{$randomPrice}},\r\n    \"pages\": 27,\r\n    \"author\": \"object id\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseApi}}/books/id",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"books",
						"id"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book Delete",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseApi}}/books/id",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"books",
						"id"
					]
				}
			},
			"response": []
		},
		{
			"name": "Author",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseApi}}/authors",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"authors"
					]
				}
			},
			"response": []
		},
		{
			"name": "Author by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - _id, name, and country\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('_id');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('country');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id should be a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Country is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.country).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Country should not be empty\");\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseApi}}/authors/66fdd2eb79177bed4e1ed1f7",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"authors",
						"66fdd2eb79177bed4e1ed1f7"
					]
				},
				"description": "### Get Author Details\n\nThis endpoint retrieves the details of a specific author.\n\n#### Request\n\nThe request does not require any specific parameters. It uses the author ID as part of the URL path.\n\n- Method: GET\n    \n- URL: `{{baseApi}}/authors/66fdd2eb79177bed4e1ed1f7`\n    \n\n#### Response\n\nThe response will be a JSON object with the following schema:\n\n``` json\n{\n  \"_id\": \"\",\n  \"name\": \"\",\n  \"country\": \"\"\n}\n\n ```\n\nThe response contains the details of the author including their ID, name, and country.\n\n#### Example\n\n``` json\n{\n  \"_id\": \"exampleId\",\n  \"name\": \"exampleName\",\n  \"country\": \"exampleCountry\"\n}\n\n ```"
			},
			"response": [
				{
					"name": "Author by id",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseApi}}/authors/66fdd2eb79177bed4e1ed1f7",
							"host": [
								"{{baseApi}}"
							],
							"path": [
								"authors",
								"66fdd2eb79177bed4e1ed1f7"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "76"
						},
						{
							"key": "ETag",
							"value": "W/\"4c-NnyDHDl/8CU59SA0I4oorfbXt5A\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Oct 2024 23:14:25 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"_id\": \"66fdd2eb79177bed4e1ed1f7\",\n    \"name\": \"Kay Goyette\",\n    \"country\": \"Malaysia\"\n}"
				}
			]
		},
		{
			"name": "Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - message, author name, country, and _id\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"    pm.expect(responseData.author).to.be.an('object');\r",
							"    pm.expect(responseData.author.name).to.exist;\r",
							"    pm.expect(responseData.author.country).to.exist;\r",
							"    pm.expect(responseData.author._id).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name and country are non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.author.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"  pm.expect(responseData.author.country).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Country should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id has a valid format\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.author._id).to.match(/^[0-9a-fA-F]{24}$/, \"Id should be a valid ObjectId format\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Presence of custom headers and their values\", function () {\r",
							"    pm.response.to.have.header(\"Custom-Header-1\");\r",
							"    pm.expect(pm.response.headers.get(\"Custom-Header-1\")).to.exist;\r",
							"\r",
							"    pm.response.to.have.header(\"Custom-Header-2\");\r",
							"    pm.expect(pm.response.headers.get(\"Custom-Header-2\")).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the message is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the author's country is a valid country code or name\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.author.country).to.match(/[A-Za-z]{2,}|[A-Za-z\\s]+/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate custom validation rules specific to the API's response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');\r",
							"  pm.expect(responseData.author).to.exist.and.to.be.an('object');\r",
							"  pm.expect(responseData.author.name).to.exist.and.to.be.a('string');\r",
							"  pm.expect(responseData.author.country).to.exist.and.to.be.a('string');\r",
							"  pm.expect(responseData.author._id).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"country\": \"{{$randomCountry}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseApi}}/authors",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"authors"
					]
				},
				"description": "### Create Author\n\nThis endpoint allows you to create a new author.\n\n#### Request Body\n\n- `name` (string, required): The name of the author.\n    \n- `country` (string, required): The country of the author.\n    \n\n#### Response (201 - Created)\n\nThe response will be in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        },\n        \"author\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"string\"\n                },\n                \"country\": {\n                    \"type\": \"string\"\n                },\n                \"_id\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n    }\n}\n\n ```"
			},
			"response": [
				{
					"name": "Author",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"country\": \"{{$randomCountry}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseApi}}/authors",
							"host": [
								"{{baseApi}}"
							],
							"path": [
								"authors"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "110"
						},
						{
							"key": "ETag",
							"value": "W/\"6e-FxsI0d5E0ieVA7HGOm0UMqvpyiA\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Oct 2024 23:10:35 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": \"Author: \",\n    \"author\": {\n        \"name\": \"Anthony O'Connell\",\n        \"country\": \"Iraq\",\n        \"_id\": \"66fdd2eb79177bed4e1ed1f7\"\n    }\n}"
				}
			]
		},
		{
			"name": "Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body has the required fields - _id, name, and country\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys('_id', 'name', 'country');\r",
							"});\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Content-Type header is 'application/json'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body format is valid JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the _id field is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"_id should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Country is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.country).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Country should not be empty\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"country\": \"{{$randomCountry}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseApi}}/authors/66fdd2eb79177bed4e1ed1f7",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"authors",
						"66fdd2eb79177bed4e1ed1f7"
					]
				},
				"description": "### Update Author Details\n\nThis endpoint allows the client to update the details of a specific author.\n\n#### Request Body\n\n- `name` (string, optional): The updated name of the author.\n    \n- `country` (string, optional): The updated country of the author.\n    \n\n#### Response\n\nThe response is a JSON object with the updated author details:\n\n``` json\n{\n  \"_id\": \"\",\n  \"name\": \"\",\n  \"country\": \"\"\n}\n\n ```\n\nThis endpoint allows you to update the details of a specific author.\n\n#### Request Body\n\n- `name` (string, required): The updated name of the author.\n    \n- `country` (string, required): The updated country of the author.\n    \n\n#### Response\n\nUpon successful update, the response will include the updated details of the author:\n\n``` json\n{\n    \"_id\": \"\",\n    \"name\": \"\",\n    \"country\": \"\"\n}\n\n ```"
			},
			"response": [
				{
					"name": "Author",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"country\": \"{{$randomCountry}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseApi}}/authors/66fdd2eb79177bed4e1ed1f7",
							"host": [
								"{{baseApi}}"
							],
							"path": [
								"authors",
								"66fdd2eb79177bed4e1ed1f7"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "78"
						},
						{
							"key": "ETag",
							"value": "W/\"4e-79FF93lNYQQTTkAAS4X8FzBqQrM\""
						},
						{
							"key": "Date",
							"value": "Wed, 02 Oct 2024 23:12:09 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"_id\": \"66fdd2eb79177bed4e1ed1f7\",\n    \"name\": \"Anthony O'Connell\",\n    \"country\": \"Iraq\"\n}"
				}
			]
		},
		{
			"name": "Author",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - _id, name, and country\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData._id).to.exist;\r",
							"    pm.expect(responseData.name).to.exist;\r",
							"    pm.expect(responseData.country).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData._id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Country is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.country).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Country should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body matches the specific schema\", function () {\r",
							"  var schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"      _id: { type: \"string\" },\r",
							"      name: { type: \"string\" },\r",
							"      country: { type: \"string\" }\r",
							"    },\r",
							"    required: [\"_id\", \"name\", \"country\"],\r",
							"  };\r",
							"\r",
							"  var response = pm.response.json();\r",
							"  pm.expect(tv4.validate(response, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseApi}}/authors/66fdd29d79177bed4e1ed1f2",
					"host": [
						"{{baseApi}}"
					],
					"path": [
						"authors",
						"66fdd29d79177bed4e1ed1f2"
					]
				},
				"description": "### Delete Author\n\nThis endpoint is used to delete a specific author from the database.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\nThe response will include the deleted author's details, such as their ID, name, and country. However, all the fields will be empty as the author has been deleted.\n\n``` json\n{\n    \"_id\": \"\",\n    \"name\": \"\",\n    \"country\": \"\"\n}\n\n ```\n\nThis JSON schema represents the structure of the response data, where the \"_id\", \"name\", and \"country\" fields will be present with their respective data types."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseApi",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}